function deleteTrigger(triggerId) {
  var allTriggers = ScriptApp.getProjectTriggers();
  for(i in allTriggers){
    ScriptApp.deleteTrigger(allTriggers[i]);
  }
}
function getCalendarEvents(calendarId){
  var calendarId = 'your_calendar_id';
  var myCalendar = CalendarApp.getCalendarById(calendarId);
  var now = new Date();
  var twoWeeksFromNow = new Date(now.getTime() + (14 * 24 * 60 * 60 * 1000));
  this.myEvents = myCalendar.getEvents(now, twoWeeksFromNow);
  for(i in myEvents) {
    var email_notifications = myEvents[i].getEmailReminders();
    var eventId = myEvents[i].getId();
    for (y in email_notifications) {
      var triggerDateTime = new Date(myEvents[i].getStartTime() - (email_notifications[y] * 60 * 1000));
    }
  }
}
function makeTriggers(){
  deleteTrigger();
  getCalendarEvents();
  for(i in myEvents) {
    var email_notifications = myEvents[i].getEmailReminders();
    for (y in email_notifications) {
      var triggerDateTime = new Date(myEvents[i].getStartTime() - (email_notifications[y] * 60 * 1000));
      //トリガーは種別でしか取ってこれないため、毎回全て作り直す。
      ScriptApp.newTrigger("makeTriggers").timeBased().atHour(9).everyDays(1).create();
      ScriptApp.newTrigger("mail").timeBased().at(triggerDateTime).create();
    }
  }
}

function mail() {
  getCalendarEvents();
  for(i in myEvents) {
    var email_notifications = myEvents[i].getEmailReminders();
    for (y in email_notifications) {
      var triggerDateTime = new Date(myEvents[i].getStartTime() - (email_notifications[y] * 60 * 1000) + (15 * 60 * 1000));
      var fromDateTime = new Date(myEvents[i].getStartTime() - (email_notifications[y] * 60 * 1000) - (15 * 60 * 1000));
      var now = new Date();
      if (fromDateTime < now < triggerDateTime) {
        var guests = myEvents[i].getGuestList();
        for(x in guests) {
          if (guests[x].getGuestStatus() == "INVITED" || guests[x].getGuestStatus() == "MAYBE") {
            MailApp.sendEmail(guests[x].getEmail(), myEvents[i].getTitle() + ”のリマインドメール”, "リマインダーメール確認： " + (myEvents[i].getStartTime().getDate() - new Date().getDate()) +"日後に予定されている「" + 
            myEvents[i].getTitle() + "」のイベントですが、あなたのステータスは現在" + guests[x].getGuestStatus() + "となっています。"
            + "イベントの一日前までにカレンダー上でステータスをYesかNoに変更してください");
          }
        }
      }
    }
  }
}
